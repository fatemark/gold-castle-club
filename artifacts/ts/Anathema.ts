/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as AnathemaContractJson } from "../nft/templates/Anathema.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace AnathemaTypes {
  export type Fields = {
    owner: Address;
    lordDeclarerAddress: Address;
    declarerNftClass: bigint;
    scroundrelAddress: Address;
    bribe: bigint;
    fealtyId: HexString;
    timeDeclared: bigint;
    reason: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getDeclarerNftClass: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getBribe: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getTimeDeclared: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getLordDeclarerAddress: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getScroundrelAddress: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getReason: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<AnathemaInstance, AnathemaTypes.Fields> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as AnathemaTypes.Fields;
  }

  consts = { ErrorCodes: { NotFealtyContract: BigInt(5) } };

  at(address: string): AnathemaInstance {
    return new AnathemaInstance(address);
  }

  tests = {
    revokeByLord: async (
      params: Omit<TestContractParams<AnathemaTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "revokeByLord", params);
    },
    getDeclarerNftClass: async (
      params: Omit<TestContractParams<AnathemaTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getDeclarerNftClass", params);
    },
    getBribe: async (
      params: Omit<TestContractParams<AnathemaTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getBribe", params);
    },
    getTimeDeclared: async (
      params: Omit<TestContractParams<AnathemaTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getTimeDeclared", params);
    },
    getLordDeclarerAddress: async (
      params: Omit<TestContractParams<AnathemaTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getLordDeclarerAddress", params);
    },
    getScroundrelAddress: async (
      params: Omit<TestContractParams<AnathemaTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getScroundrelAddress", params);
    },
    getOwner: async (
      params: Omit<TestContractParams<AnathemaTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getOwner", params);
    },
    getReason: async (
      params: Omit<TestContractParams<AnathemaTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getReason", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Anathema = new Factory(
  Contract.fromJson(
    AnathemaContractJson,
    "",
    "1f874cf085dbe79f52d6eb650eedf687a6fe2842363da9e66a39922f37ff9b59"
  )
);

// Use this class to interact with the blockchain
export class AnathemaInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<AnathemaTypes.State> {
    return fetchContractState(Anathema, this);
  }

  methods = {
    getDeclarerNftClass: async (
      params?: AnathemaTypes.CallMethodParams<"getDeclarerNftClass">
    ): Promise<AnathemaTypes.CallMethodResult<"getDeclarerNftClass">> => {
      return callMethod(
        Anathema,
        this,
        "getDeclarerNftClass",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getBribe: async (
      params?: AnathemaTypes.CallMethodParams<"getBribe">
    ): Promise<AnathemaTypes.CallMethodResult<"getBribe">> => {
      return callMethod(
        Anathema,
        this,
        "getBribe",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTimeDeclared: async (
      params?: AnathemaTypes.CallMethodParams<"getTimeDeclared">
    ): Promise<AnathemaTypes.CallMethodResult<"getTimeDeclared">> => {
      return callMethod(
        Anathema,
        this,
        "getTimeDeclared",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getLordDeclarerAddress: async (
      params?: AnathemaTypes.CallMethodParams<"getLordDeclarerAddress">
    ): Promise<AnathemaTypes.CallMethodResult<"getLordDeclarerAddress">> => {
      return callMethod(
        Anathema,
        this,
        "getLordDeclarerAddress",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getScroundrelAddress: async (
      params?: AnathemaTypes.CallMethodParams<"getScroundrelAddress">
    ): Promise<AnathemaTypes.CallMethodResult<"getScroundrelAddress">> => {
      return callMethod(
        Anathema,
        this,
        "getScroundrelAddress",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getOwner: async (
      params?: AnathemaTypes.CallMethodParams<"getOwner">
    ): Promise<AnathemaTypes.CallMethodResult<"getOwner">> => {
      return callMethod(
        Anathema,
        this,
        "getOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getReason: async (
      params?: AnathemaTypes.CallMethodParams<"getReason">
    ): Promise<AnathemaTypes.CallMethodResult<"getReason">> => {
      return callMethod(
        Anathema,
        this,
        "getReason",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends AnathemaTypes.MultiCallParams>(
    calls: Calls
  ): Promise<AnathemaTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Anathema,
      this,
      calls,
      getContractByCodeHash
    )) as AnathemaTypes.MultiCallResults<Calls>;
  }
}
