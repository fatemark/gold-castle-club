/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as GoldTokenContractJson } from "../goldtoken/GoldToken.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace GoldTokenTypes {
  export type Fields = {
    symbol: HexString;
    name: HexString;
    decimals: bigint;
    supply: bigint;
    chancellor: Address;
    fealtyId: HexString;
    lotterybalance: bigint;
    warfund: bigint;
    airdropbalance: bigint;
    wartime: bigint;
    jackpot: bigint;
  };

  export type State = ContractState<Fields>;

  export type WithdrawEvent = ContractEvent<{
    to: Address;
    transferamount: bigint;
    jackpotwinnings: bigint;
    jackpot: bigint;
  }>;

  export interface CallMethodTable {
    getSymbol: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getName: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getDecimals: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getTotalSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getJackpot: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    lotterybalance: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAirdropbalance: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  GoldTokenInstance,
  GoldTokenTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as GoldTokenTypes.Fields;
  }

  eventIndex = { Withdraw: 0 };
  consts = {
    ErrorCodes: {
      InvalidWithdrawAmount: BigInt(0),
      NotTheChancellor: BigInt(99),
      NotWarTimeYet: BigInt(21),
      NoLottery: BigInt(120),
      NoAirdropbalance: BigInt(230),
      LotteryStillGoing: BigInt(777),
    },
  };

  at(address: string): GoldTokenInstance {
    return new GoldTokenInstance(address);
  }

  tests = {
    getSymbol: async (
      params: Omit<TestContractParams<GoldTokenTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getSymbol", params);
    },
    getName: async (
      params: Omit<TestContractParams<GoldTokenTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getName", params);
    },
    getDecimals: async (
      params: Omit<TestContractParams<GoldTokenTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getDecimals", params);
    },
    getTotalSupply: async (
      params: Omit<TestContractParams<GoldTokenTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getTotalSupply", params);
    },
    getJackpot: async (
      params: Omit<TestContractParams<GoldTokenTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getJackpot", params);
    },
    lotterybalance: async (
      params: Omit<TestContractParams<GoldTokenTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "lotterybalance", params);
    },
    getAirdropbalance: async (
      params: Omit<TestContractParams<GoldTokenTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getAirdropbalance", params);
    },
    withdraw: async (
      params: TestContractParams<GoldTokenTypes.Fields, { betamount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdraw", params);
    },
    airdropWithdraw: async (
      params: TestContractParams<GoldTokenTypes.Fields, { amount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "airdropWithdraw", params);
    },
    emergencyWithdraw: async (
      params: Omit<TestContractParams<GoldTokenTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "emergencyWithdraw", params);
    },
    warForTheAges: async (
      params: Omit<TestContractParams<GoldTokenTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "warForTheAges", params);
    },
  };
}

// Use this object to test and deploy the contract
export const GoldToken = new Factory(
  Contract.fromJson(
    GoldTokenContractJson,
    "",
    "683511c194b195df560543287b2ed5f4031d1cef581e3f733ea30dda4902fd1c"
  )
);

// Use this class to interact with the blockchain
export class GoldTokenInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<GoldTokenTypes.State> {
    return fetchContractState(GoldToken, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeWithdrawEvent(
    options: EventSubscribeOptions<GoldTokenTypes.WithdrawEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      GoldToken.contract,
      this,
      options,
      "Withdraw",
      fromCount
    );
  }

  methods = {
    getSymbol: async (
      params?: GoldTokenTypes.CallMethodParams<"getSymbol">
    ): Promise<GoldTokenTypes.CallMethodResult<"getSymbol">> => {
      return callMethod(
        GoldToken,
        this,
        "getSymbol",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getName: async (
      params?: GoldTokenTypes.CallMethodParams<"getName">
    ): Promise<GoldTokenTypes.CallMethodResult<"getName">> => {
      return callMethod(
        GoldToken,
        this,
        "getName",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getDecimals: async (
      params?: GoldTokenTypes.CallMethodParams<"getDecimals">
    ): Promise<GoldTokenTypes.CallMethodResult<"getDecimals">> => {
      return callMethod(
        GoldToken,
        this,
        "getDecimals",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTotalSupply: async (
      params?: GoldTokenTypes.CallMethodParams<"getTotalSupply">
    ): Promise<GoldTokenTypes.CallMethodResult<"getTotalSupply">> => {
      return callMethod(
        GoldToken,
        this,
        "getTotalSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getJackpot: async (
      params?: GoldTokenTypes.CallMethodParams<"getJackpot">
    ): Promise<GoldTokenTypes.CallMethodResult<"getJackpot">> => {
      return callMethod(
        GoldToken,
        this,
        "getJackpot",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    lotterybalance: async (
      params?: GoldTokenTypes.CallMethodParams<"lotterybalance">
    ): Promise<GoldTokenTypes.CallMethodResult<"lotterybalance">> => {
      return callMethod(
        GoldToken,
        this,
        "lotterybalance",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAirdropbalance: async (
      params?: GoldTokenTypes.CallMethodParams<"getAirdropbalance">
    ): Promise<GoldTokenTypes.CallMethodResult<"getAirdropbalance">> => {
      return callMethod(
        GoldToken,
        this,
        "getAirdropbalance",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends GoldTokenTypes.MultiCallParams>(
    calls: Calls
  ): Promise<GoldTokenTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      GoldToken,
      this,
      calls,
      getContractByCodeHash
    )) as GoldTokenTypes.MultiCallResults<Calls>;
  }
}
