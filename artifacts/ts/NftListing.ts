/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as NftListingContractJson } from "../marketplace/NftListing.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace NftListingTypes {
  export type Fields = {
    marketplaceId: HexString;
    nftId: HexString;
    price: bigint;
    lister: Address;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getPrice: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getNftId: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getLister: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  NftListingInstance,
  NftListingTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as NftListingTypes.Fields;
  }

  consts = { ErrorCodes: { NotMarketplace: BigInt(13) } };

  at(address: string): NftListingInstance {
    return new NftListingInstance(address);
  }

  tests = {
    buyNFT: async (
      params: TestContractParams<
        NftListingTypes.Fields,
        { buyer: Address; priceAfterFee: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "buyNFT", params);
    },
    revokeListing: async (
      params: Omit<
        TestContractParams<NftListingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "revokeListing", params);
    },
    getPrice: async (
      params: Omit<
        TestContractParams<NftListingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getPrice", params);
    },
    getNftId: async (
      params: Omit<
        TestContractParams<NftListingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getNftId", params);
    },
    getLister: async (
      params: Omit<
        TestContractParams<NftListingTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getLister", params);
    },
  };
}

// Use this object to test and deploy the contract
export const NftListing = new Factory(
  Contract.fromJson(
    NftListingContractJson,
    "",
    "2b777eaf3b29a86b595d5f135f5bf3e10e8b8ba9f35ee623666e37d25ed72e68"
  )
);

// Use this class to interact with the blockchain
export class NftListingInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<NftListingTypes.State> {
    return fetchContractState(NftListing, this);
  }

  methods = {
    getPrice: async (
      params?: NftListingTypes.CallMethodParams<"getPrice">
    ): Promise<NftListingTypes.CallMethodResult<"getPrice">> => {
      return callMethod(
        NftListing,
        this,
        "getPrice",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNftId: async (
      params?: NftListingTypes.CallMethodParams<"getNftId">
    ): Promise<NftListingTypes.CallMethodResult<"getNftId">> => {
      return callMethod(
        NftListing,
        this,
        "getNftId",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getLister: async (
      params?: NftListingTypes.CallMethodParams<"getLister">
    ): Promise<NftListingTypes.CallMethodResult<"getLister">> => {
      return callMethod(
        NftListing,
        this,
        "getLister",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends NftListingTypes.MultiCallParams>(
    calls: Calls
  ): Promise<NftListingTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      NftListing,
      this,
      calls,
      getContractByCodeHash
    )) as NftListingTypes.MultiCallResults<Calls>;
  }
}
