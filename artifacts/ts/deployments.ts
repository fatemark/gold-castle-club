/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { RunScriptResult, DeployContractExecutionResult } from "@alephium/cli";
import { NetworkId } from "@alephium/web3";
import {
  NFT,
  NFTInstance,
  MarriageSpecific,
  MarriageSpecificInstance,
  FealtyForGold,
  FealtyForGoldInstance,
  Anathema,
  AnathemaInstance,
  Fealty,
  FealtyInstance,
  NFTPublicSaleCollectionRandomWithRoyalty,
  NFTPublicSaleCollectionRandomWithRoyaltyInstance,
  GoldToken,
  GoldTokenInstance,
} from ".";
import { default as mainnetDeployments } from "../.deployments.mainnet.json";

export type Deployments = {
  deployerAddress: string;
  contracts: {
    NFT: DeployContractExecutionResult<NFTInstance>;
    MarriageSpecific: DeployContractExecutionResult<MarriageSpecificInstance>;
    FealtyForGold: DeployContractExecutionResult<FealtyForGoldInstance>;
    Anathema: DeployContractExecutionResult<AnathemaInstance>;
    Fealty: DeployContractExecutionResult<FealtyInstance>;
    NFTPublicSaleCollectionRandomWithRoyalty: DeployContractExecutionResult<NFTPublicSaleCollectionRandomWithRoyaltyInstance>;
    GoldToken: DeployContractExecutionResult<GoldTokenInstance>;
  };
};

function toDeployments(json: any): Deployments {
  const contracts = {
    NFT: {
      ...json.contracts["NFT"],
      contractInstance: NFT.at(json.contracts["NFT"].contractInstance.address),
    },
    MarriageSpecific: {
      ...json.contracts["MarriageSpecific"],
      contractInstance: MarriageSpecific.at(
        json.contracts["MarriageSpecific"].contractInstance.address
      ),
    },
    FealtyForGold: {
      ...json.contracts["FealtyForGold"],
      contractInstance: FealtyForGold.at(
        json.contracts["FealtyForGold"].contractInstance.address
      ),
    },
    Anathema: {
      ...json.contracts["Anathema"],
      contractInstance: Anathema.at(
        json.contracts["Anathema"].contractInstance.address
      ),
    },
    Fealty: {
      ...json.contracts["Fealty"],
      contractInstance: Fealty.at(
        json.contracts["Fealty"].contractInstance.address
      ),
    },
    NFTPublicSaleCollectionRandomWithRoyalty: {
      ...json.contracts["NFTPublicSaleCollectionRandomWithRoyalty"],
      contractInstance: NFTPublicSaleCollectionRandomWithRoyalty.at(
        json.contracts["NFTPublicSaleCollectionRandomWithRoyalty"]
          .contractInstance.address
      ),
    },
    GoldToken: {
      ...json.contracts["GoldToken"],
      contractInstance: GoldToken.at(
        json.contracts["GoldToken"].contractInstance.address
      ),
    },
  };
  return {
    ...json,
    contracts: contracts as Deployments["contracts"],
  };
}

export function loadDeployments(
  networkId: NetworkId,
  deployerAddress?: string
): Deployments {
  const deployments = networkId === "mainnet" ? mainnetDeployments : undefined;
  if (deployments === undefined) {
    throw Error("The contract has not been deployed to the " + networkId);
  }
  const allDeployments = Array.isArray(deployments)
    ? deployments
    : [deployments];
  if (deployerAddress === undefined) {
    if (allDeployments.length > 1) {
      throw Error(
        "The contract has been deployed multiple times on " +
          networkId +
          ", please specify the deployer address"
      );
    } else {
      return toDeployments(allDeployments[0]);
    }
  }
  const result = allDeployments.find(
    (d) => d.deployerAddress === deployerAddress
  );
  if (result === undefined) {
    throw Error("The contract deployment result does not exist");
  }
  return toDeployments(result);
}
