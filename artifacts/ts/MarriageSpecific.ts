/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as MarriageSpecificContractJson } from "../nft/templates/MarriageSpecific.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace MarriageSpecificTypes {
  export type Fields = {
    proposer: Address;
    dowry: bigint;
    time: bigint;
    goldtokenid: HexString;
    fealtyId: HexString;
    proposee: Address;
    owner: Address;
    loveletter: HexString;
    maxlovercount: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getProposer: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getProposee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getDowry: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getTime: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getLoveletter: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getmaxlovercount: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  MarriageSpecificInstance,
  MarriageSpecificTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as MarriageSpecificTypes.Fields;
  }

  consts = {
    ErrorCodes: { NotFealtyContract: BigInt(38), NotProposee: BigInt(39) },
  };

  at(address: string): MarriageSpecificInstance {
    return new MarriageSpecificInstance(address);
  }

  tests = {
    accept: async (
      params: TestContractParams<
        MarriageSpecificTypes.Fields,
        { proposeeOwner: Address; proposeeCaller: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "accept", params);
    },
    destroyOffer: async (
      params: Omit<
        TestContractParams<MarriageSpecificTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "destroyOffer", params);
    },
    getProposer: async (
      params: Omit<
        TestContractParams<MarriageSpecificTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getProposer", params);
    },
    getProposee: async (
      params: Omit<
        TestContractParams<MarriageSpecificTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getProposee", params);
    },
    getDowry: async (
      params: Omit<
        TestContractParams<MarriageSpecificTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getDowry", params);
    },
    getTime: async (
      params: Omit<
        TestContractParams<MarriageSpecificTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getTime", params);
    },
    getLoveletter: async (
      params: Omit<
        TestContractParams<MarriageSpecificTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getLoveletter", params);
    },
    getmaxlovercount: async (
      params: Omit<
        TestContractParams<MarriageSpecificTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getmaxlovercount", params);
    },
  };
}

// Use this object to test and deploy the contract
export const MarriageSpecific = new Factory(
  Contract.fromJson(
    MarriageSpecificContractJson,
    "",
    "92dcf5cb564a6161b3f821532f639af11e11becf34bab6b78f3efd4309eba8f0"
  )
);

// Use this class to interact with the blockchain
export class MarriageSpecificInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<MarriageSpecificTypes.State> {
    return fetchContractState(MarriageSpecific, this);
  }

  methods = {
    getProposer: async (
      params?: MarriageSpecificTypes.CallMethodParams<"getProposer">
    ): Promise<MarriageSpecificTypes.CallMethodResult<"getProposer">> => {
      return callMethod(
        MarriageSpecific,
        this,
        "getProposer",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getProposee: async (
      params?: MarriageSpecificTypes.CallMethodParams<"getProposee">
    ): Promise<MarriageSpecificTypes.CallMethodResult<"getProposee">> => {
      return callMethod(
        MarriageSpecific,
        this,
        "getProposee",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getDowry: async (
      params?: MarriageSpecificTypes.CallMethodParams<"getDowry">
    ): Promise<MarriageSpecificTypes.CallMethodResult<"getDowry">> => {
      return callMethod(
        MarriageSpecific,
        this,
        "getDowry",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTime: async (
      params?: MarriageSpecificTypes.CallMethodParams<"getTime">
    ): Promise<MarriageSpecificTypes.CallMethodResult<"getTime">> => {
      return callMethod(
        MarriageSpecific,
        this,
        "getTime",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getLoveletter: async (
      params?: MarriageSpecificTypes.CallMethodParams<"getLoveletter">
    ): Promise<MarriageSpecificTypes.CallMethodResult<"getLoveletter">> => {
      return callMethod(
        MarriageSpecific,
        this,
        "getLoveletter",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getmaxlovercount: async (
      params?: MarriageSpecificTypes.CallMethodParams<"getmaxlovercount">
    ): Promise<MarriageSpecificTypes.CallMethodResult<"getmaxlovercount">> => {
      return callMethod(
        MarriageSpecific,
        this,
        "getmaxlovercount",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends MarriageSpecificTypes.MultiCallParams>(
    calls: Calls
  ): Promise<MarriageSpecificTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      MarriageSpecific,
      this,
      calls,
      getContractByCodeHash
    )) as MarriageSpecificTypes.MultiCallResults<Calls>;
  }
}
