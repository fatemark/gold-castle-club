/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as NFTContractJson } from "../nft/NFT.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace NFTTypes {
  export type Fields = {
    tokenUri: HexString;
    collectionId: HexString;
    nftIndex: bigint;
    nftclass: bigint;
    fealtyId: HexString;
    owner: Address;
    vote: bigint;
    voteTime: bigint;
    wartarget: Address;
    warStarted: bigint;
    marriage: Address;
    marriageTime: bigint;
    feudalLord: Address;
    feudalTime: bigint;
    anathema: boolean;
    anathemaDeclaredCount: bigint;
    lovercount: bigint;
    anathemaCooldown: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getTokenUri: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getCollectionIndex: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[HexString, bigint]>;
    };
    getAnathemaCooldown: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getMarriage: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[bigint, Address]>;
    };
    getLovercount: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAnathemaDeclaredCount: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAnathema: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
    getfeudalLord: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getWarTarget: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[Address, bigint]>;
    };
    getNftclass: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getNFTIndex: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getVote: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[bigint, bigint]>;
    };
    ownerchange: {
      params: CallContractParams<{ newowner: Address }>;
      result: CallContractResult<Address>;
    };
    getOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<NFTInstance, NFTTypes.Fields> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as NFTTypes.Fields;
  }

  consts = {
    ErrorCodes: {
      Marriagestillfresh: BigInt(2),
      TooEarlyforBetrayal: BigInt(1),
      Wrongcollection: BigInt(10),
      CooldownAnathema: BigInt(200),
      StillOnTheMarch: BigInt(225),
      NotFealtyId: BigInt(226),
    },
  };

  at(address: string): NFTInstance {
    return new NFTInstance(address);
  }

  tests = {
    getTokenUri: async (
      params: Omit<TestContractParams<NFTTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getTokenUri", params);
    },
    getCollectionIndex: async (
      params: Omit<TestContractParams<NFTTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<[HexString, bigint]>> => {
      return testMethod(this, "getCollectionIndex", params);
    },
    getAnathemaCooldown: async (
      params: Omit<TestContractParams<NFTTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getAnathemaCooldown", params);
    },
    getMarriage: async (
      params: Omit<TestContractParams<NFTTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<[bigint, Address]>> => {
      return testMethod(this, "getMarriage", params);
    },
    getLovercount: async (
      params: Omit<TestContractParams<NFTTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getLovercount", params);
    },
    getAnathemaDeclaredCount: async (
      params: Omit<TestContractParams<NFTTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getAnathemaDeclaredCount", params);
    },
    getAnathema: async (
      params: Omit<TestContractParams<NFTTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<boolean>> => {
      return testMethod(this, "getAnathema", params);
    },
    getfeudalLord: async (
      params: Omit<TestContractParams<NFTTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getfeudalLord", params);
    },
    getWarTarget: async (
      params: Omit<TestContractParams<NFTTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<[Address, bigint]>> => {
      return testMethod(this, "getWarTarget", params);
    },
    declareWar: async (
      params: TestContractParams<
        NFTTypes.Fields,
        { target: Address; timenow: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "declareWar", params);
    },
    getNftclass: async (
      params: Omit<TestContractParams<NFTTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getNftclass", params);
    },
    getNFTIndex: async (
      params: Omit<TestContractParams<NFTTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getNFTIndex", params);
    },
    voteInElection: async (
      params: TestContractParams<
        NFTTypes.Fields,
        { voteInput: bigint; voteTimeInput: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "voteInElection", params);
    },
    getVote: async (
      params: Omit<TestContractParams<NFTTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<[bigint, bigint]>> => {
      return testMethod(this, "getVote", params);
    },
    ownerchange: async (
      params: TestContractParams<NFTTypes.Fields, { newowner: Address }>
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "ownerchange", params);
    },
    getOwner: async (
      params: Omit<TestContractParams<NFTTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getOwner", params);
    },
    marriageChange: async (
      params: TestContractParams<
        NFTTypes.Fields,
        { newMarriagepartner: Address; extratime: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "marriageChange", params);
    },
    changeLovercount: async (
      params: Omit<TestContractParams<NFTTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "changeLovercount", params);
    },
    feudalChange: async (
      params: TestContractParams<
        NFTTypes.Fields,
        { newLord: Address; extratime: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "feudalChange", params);
    },
    anathemaChange: async (
      params: TestContractParams<NFTTypes.Fields, { newAnathema: boolean }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "anathemaChange", params);
    },
    anathemaDeclaredCountChange: async (
      params: TestContractParams<
        NFTTypes.Fields,
        { newAnathemaDeclaredCount: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "anathemaDeclaredCountChange", params);
    },
    destroyNft: async (
      params: TestContractParams<NFTTypes.Fields, { caller: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "destroyNft", params);
    },
  };
}

// Use this object to test and deploy the contract
export const NFT = new Factory(
  Contract.fromJson(
    NFTContractJson,
    "",
    "e3b8b1d9e07bced78726022d82a4386b6cb1a452b5d845699512e1c2d4e42dbc"
  )
);

// Use this class to interact with the blockchain
export class NFTInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<NFTTypes.State> {
    return fetchContractState(NFT, this);
  }

  methods = {
    getTokenUri: async (
      params?: NFTTypes.CallMethodParams<"getTokenUri">
    ): Promise<NFTTypes.CallMethodResult<"getTokenUri">> => {
      return callMethod(
        NFT,
        this,
        "getTokenUri",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getCollectionIndex: async (
      params?: NFTTypes.CallMethodParams<"getCollectionIndex">
    ): Promise<NFTTypes.CallMethodResult<"getCollectionIndex">> => {
      return callMethod(
        NFT,
        this,
        "getCollectionIndex",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAnathemaCooldown: async (
      params?: NFTTypes.CallMethodParams<"getAnathemaCooldown">
    ): Promise<NFTTypes.CallMethodResult<"getAnathemaCooldown">> => {
      return callMethod(
        NFT,
        this,
        "getAnathemaCooldown",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getMarriage: async (
      params?: NFTTypes.CallMethodParams<"getMarriage">
    ): Promise<NFTTypes.CallMethodResult<"getMarriage">> => {
      return callMethod(
        NFT,
        this,
        "getMarriage",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getLovercount: async (
      params?: NFTTypes.CallMethodParams<"getLovercount">
    ): Promise<NFTTypes.CallMethodResult<"getLovercount">> => {
      return callMethod(
        NFT,
        this,
        "getLovercount",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAnathemaDeclaredCount: async (
      params?: NFTTypes.CallMethodParams<"getAnathemaDeclaredCount">
    ): Promise<NFTTypes.CallMethodResult<"getAnathemaDeclaredCount">> => {
      return callMethod(
        NFT,
        this,
        "getAnathemaDeclaredCount",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAnathema: async (
      params?: NFTTypes.CallMethodParams<"getAnathema">
    ): Promise<NFTTypes.CallMethodResult<"getAnathema">> => {
      return callMethod(
        NFT,
        this,
        "getAnathema",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getfeudalLord: async (
      params?: NFTTypes.CallMethodParams<"getfeudalLord">
    ): Promise<NFTTypes.CallMethodResult<"getfeudalLord">> => {
      return callMethod(
        NFT,
        this,
        "getfeudalLord",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getWarTarget: async (
      params?: NFTTypes.CallMethodParams<"getWarTarget">
    ): Promise<NFTTypes.CallMethodResult<"getWarTarget">> => {
      return callMethod(
        NFT,
        this,
        "getWarTarget",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNftclass: async (
      params?: NFTTypes.CallMethodParams<"getNftclass">
    ): Promise<NFTTypes.CallMethodResult<"getNftclass">> => {
      return callMethod(
        NFT,
        this,
        "getNftclass",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNFTIndex: async (
      params?: NFTTypes.CallMethodParams<"getNFTIndex">
    ): Promise<NFTTypes.CallMethodResult<"getNFTIndex">> => {
      return callMethod(
        NFT,
        this,
        "getNFTIndex",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getVote: async (
      params?: NFTTypes.CallMethodParams<"getVote">
    ): Promise<NFTTypes.CallMethodResult<"getVote">> => {
      return callMethod(
        NFT,
        this,
        "getVote",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    ownerchange: async (
      params: NFTTypes.CallMethodParams<"ownerchange">
    ): Promise<NFTTypes.CallMethodResult<"ownerchange">> => {
      return callMethod(
        NFT,
        this,
        "ownerchange",
        params,
        getContractByCodeHash
      );
    },
    getOwner: async (
      params?: NFTTypes.CallMethodParams<"getOwner">
    ): Promise<NFTTypes.CallMethodResult<"getOwner">> => {
      return callMethod(
        NFT,
        this,
        "getOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends NFTTypes.MultiCallParams>(
    calls: Calls
  ): Promise<NFTTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      NFT,
      this,
      calls,
      getContractByCodeHash
    )) as NFTTypes.MultiCallResults<Calls>;
  }
}
