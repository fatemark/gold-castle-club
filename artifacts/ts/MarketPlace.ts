/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as MarketPlaceContractJson } from "../marketplace/MarketPlace.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace MarketPlaceTypes {
  export type Fields = {
    listingTemplateId: HexString;
    marketplaceOwner: Address;
  };

  export type State = ContractState<Fields>;

  export type NewListingEvent = ContractEvent<{
    newlisting: HexString;
    price: bigint;
    nftId: HexString;
    lister: Address;
  }>;
  export type NewBuyListingEvent = ContractEvent<{
    nftId: HexString;
    price: bigint;
  }>;
  export type RevokedListingEvent = ContractEvent<{ nftId: HexString }>;
  export type NewOwnerEvent = ContractEvent<{ nftId: HexString }>;
}

class Factory extends ContractFactory<
  MarketPlaceInstance,
  MarketPlaceTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as MarketPlaceTypes.Fields;
  }

  eventIndex = {
    NewListing: 0,
    NewBuyListing: 1,
    RevokedListing: 2,
    NewOwner: 3,
  };
  consts = { ErrorCodes: { NotOwner: BigInt(108), NotLister: BigInt(124) } };

  at(address: string): MarketPlaceInstance {
    return new MarketPlaceInstance(address);
  }

  tests = {
    createListing: async (
      params: TestContractParams<
        MarketPlaceTypes.Fields,
        { nftId: HexString; price: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createListing", params);
    },
    buyListing: async (
      params: TestContractParams<MarketPlaceTypes.Fields, { nftId: HexString }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "buyListing", params);
    },
    withdrawFees: async (
      params: TestContractParams<
        MarketPlaceTypes.Fields,
        { withdrawamount: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdrawFees", params);
    },
    migrateToNewMarketplace: async (
      params: TestContractParams<
        MarketPlaceTypes.Fields,
        { newcode: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "migrateToNewMarketplace", params);
    },
    revokeListing: async (
      params: TestContractParams<MarketPlaceTypes.Fields, { nftId: HexString }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "revokeListing", params);
    },
    changeOwner: async (
      params: TestContractParams<MarketPlaceTypes.Fields, { nftId: HexString }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "changeOwner", params);
    },
  };
}

// Use this object to test and deploy the contract
export const MarketPlace = new Factory(
  Contract.fromJson(
    MarketPlaceContractJson,
    "",
    "a18dd3da1255f952360b8c86e36d5d6eb0b0af6e0a52307282720ecea0a75cdc"
  )
);

// Use this class to interact with the blockchain
export class MarketPlaceInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<MarketPlaceTypes.State> {
    return fetchContractState(MarketPlace, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeNewListingEvent(
    options: EventSubscribeOptions<MarketPlaceTypes.NewListingEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      MarketPlace.contract,
      this,
      options,
      "NewListing",
      fromCount
    );
  }

  subscribeNewBuyListingEvent(
    options: EventSubscribeOptions<MarketPlaceTypes.NewBuyListingEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      MarketPlace.contract,
      this,
      options,
      "NewBuyListing",
      fromCount
    );
  }

  subscribeRevokedListingEvent(
    options: EventSubscribeOptions<MarketPlaceTypes.RevokedListingEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      MarketPlace.contract,
      this,
      options,
      "RevokedListing",
      fromCount
    );
  }

  subscribeNewOwnerEvent(
    options: EventSubscribeOptions<MarketPlaceTypes.NewOwnerEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      MarketPlace.contract,
      this,
      options,
      "NewOwner",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | MarketPlaceTypes.NewListingEvent
      | MarketPlaceTypes.NewBuyListingEvent
      | MarketPlaceTypes.RevokedListingEvent
      | MarketPlaceTypes.NewOwnerEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      MarketPlace.contract,
      this,
      options,
      fromCount
    );
  }
}
