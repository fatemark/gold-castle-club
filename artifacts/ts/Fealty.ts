/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as FealtyContractJson } from "../nft/Fealty.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace FealtyTypes {
  export type Fields = {
    fealtyforgoldid: HexString;
    systemowner: Address;
    specificmarriagetemplateid: HexString;
    anathemaId: HexString;
    goldtokenid: HexString;
    asiaCollectionid: HexString;
    europeCollectionid: HexString;
    americasCollectionid: HexString;
    africaCollectionid: HexString;
    antarticaOceaniaCollectionid: HexString;
    championsCollectionid: HexString;
    countriesCollectionid: HexString;
    divorcefee: bigint;
  };

  export type State = ContractState<Fields>;

  export type NewMarriageEvent = ContractEvent<{
    proposer: Address;
    proposee: Address;
  }>;
  export type NewMarriageContractOfferEvent = ContractEvent<{
    proposer: Address;
    proposee: Address;
    dowry: bigint;
    time: bigint;
    loveletter: HexString;
    maxlovercount: bigint;
  }>;
  export type NewMarriageWithDowryEvent = ContractEvent<{
    proposer: Address;
    proposee: Address;
  }>;
  export type RescindMarriageEvent = ContractEvent<{ proposer: Address }>;
  export type DivorceEvent = ContractEvent<{
    wifeHusband: Address;
    claimant: Address;
  }>;
  export type BecomeLoverEvent = ContractEvent<{
    selfloverAddress: Address;
    lovertargetAddress: Address;
  }>;
  export type NewFealtyContractEvent = ContractEvent<{
    bribe: bigint;
    time: bigint;
    lordAddress: Address;
    minimumClass: bigint;
    lordSubjectIndex: bigint;
    campaign: HexString;
    subjecttarget: Address;
  }>;
  export type NewSwearForGoldEvent = ContractEvent<{
    lordAddress: Address;
    subjectAddress: Address;
    lordSubjectIndex: bigint;
  }>;
  export type NewSwearForFreeEvent = ContractEvent<{
    lordAddress: Address;
    subjectAddress: Address;
    time: bigint;
  }>;
  export type NewRescindGoldFealtyOfferEvent = ContractEvent<{
    lordAddress: Address;
    lordSubjectIndex: bigint;
  }>;
  export type NewDeclareAnathemaByHigherLordEvent = ContractEvent<{
    declarerLordAddress: Address;
    scroundrelAddress: Address;
    bribe: bigint;
    reason: HexString;
  }>;
  export type NewDeclareAnathemaByLordEvent = ContractEvent<{
    declarerLordAddress: Address;
    scroundrelAddress: Address;
    bribe: bigint;
    reason: HexString;
  }>;
  export type NewRevokeAnathemaByDeclarerEvent = ContractEvent<{
    revokerAddress: Address;
    scroundrelAddress: Address;
  }>;
  export type NewRevokeAnathemaByHighLordEvent = ContractEvent<{
    revokerAddress: Address;
    scroundrelAddress: Address;
  }>;
  export type NewRevokeAnathemaByBribeEvent = ContractEvent<{
    scroundrelAddress: Address;
    lordAddress: Address;
  }>;
  export type NewRevokeAnathemaByTimeEvent = ContractEvent<{
    scroundrelAddress: Address;
  }>;
  export type WarDeclaredEvent = ContractEvent<{
    declarerAddress: Address;
    targetAddress: Address;
    timenow: bigint;
  }>;
  export type VotedEvent = ContractEvent<{
    voterId: HexString;
    voteInput: bigint;
    voteTime: bigint;
  }>;
  export type BecameOverlordEvent = ContractEvent<{ lordAddress: Address }>;

  export interface CallMethodTable {
    checkChancellor: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    validateNFT: {
      params: CallContractParams<{ callerid: HexString }>;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<FealtyInstance, FealtyTypes.Fields> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as FealtyTypes.Fields;
  }

  eventIndex = {
    NewMarriage: 0,
    NewMarriageContractOffer: 1,
    NewMarriageWithDowry: 2,
    RescindMarriage: 3,
    Divorce: 4,
    BecomeLover: 5,
    NewFealtyContract: 6,
    NewSwearForGold: 7,
    NewSwearForFree: 8,
    NewRescindGoldFealtyOffer: 9,
    NewDeclareAnathemaByHigherLord: 10,
    NewDeclareAnathemaByLord: 11,
    NewRevokeAnathemaByDeclarer: 12,
    NewRevokeAnathemaByHighLord: 13,
    NewRevokeAnathemaByBribe: 14,
    NewRevokeAnathemaByTime: 15,
    WarDeclared: 16,
    Voted: 17,
    BecameOverlord: 18,
  };
  consts = {
    ErrorCodes: {
      NotSystemOwner: BigInt(76),
      Wrongcollection: BigInt(43),
      NotTheFeudalLord: BigInt(23),
      NotEnoughStanding: BigInt(42),
      NotOwner: BigInt(21),
      BribeTooHigh: BigInt(7),
      NotDeclarer: BigInt(4),
      NotYourTimeYet: BigInt(5),
      DeclaredAnathemaThreeTimesAlready: BigInt(6),
      TooManyOffers: BigInt(101),
      SubjectNeedsToBeLowerInClass: BigInt(102),
      TooLowInStanding: BigInt(103),
      StillMarried: BigInt(115),
      RecentlyDivorced: BigInt(116),
      NotMarried: BigInt(117),
      DivorceBeforeMarry: BigInt(118),
      TooSluttyForProposer: BigInt(119),
      CantSwearToSelf: BigInt(122),
      TooHighInStanding: BigInt(444),
    },
  };

  at(address: string): FealtyInstance {
    return new FealtyInstance(address);
  }

  tests = {
    newFealtyContractMigration: async (
      params: TestContractParams<FealtyTypes.Fields, { newBytecode: HexString }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "newFealtyContractMigration", params);
    },
    changeDivorceFee: async (
      params: TestContractParams<FealtyTypes.Fields, { newdivorcefee: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "changeDivorceFee", params);
    },
    withDraw: async (
      params: TestContractParams<
        FealtyTypes.Fields,
        { amount: bigint; tokenId: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withDraw", params);
    },
    checkChancellor: async (
      params: Omit<TestContractParams<FealtyTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "checkChancellor", params);
    },
    newCollection: async (
      params: TestContractParams<
        FealtyTypes.Fields,
        { newcollection: HexString; collectiontochangenumber: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "newCollection", params);
    },
    marryOwnCollection: async (
      params: TestContractParams<
        FealtyTypes.Fields,
        { proposee: Address; proposer: Address; extratime: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "marryOwnCollection", params);
    },
    createMarriageContract: async (
      params: TestContractParams<
        FealtyTypes.Fields,
        {
          proposee: Address;
          proposer: Address;
          dowry: bigint;
          time: bigint;
          loveletter: HexString;
          maxlovercount: bigint;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createMarriageContract", params);
    },
    acceptMarriage: async (
      params: TestContractParams<
        FealtyTypes.Fields,
        { proposee: Address; proposer: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "acceptMarriage", params);
    },
    rescindMarriageOffer: async (
      params: TestContractParams<FealtyTypes.Fields, { proposer: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "rescindMarriageOffer", params);
    },
    divorce: async (
      params: TestContractParams<
        FealtyTypes.Fields,
        { wifeHusband: Address; claimant: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "divorce", params);
    },
    becomeLover: async (
      params: TestContractParams<
        FealtyTypes.Fields,
        { selfloverAddress: Address; lovertargetAddress: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "becomeLover", params);
    },
    createFealtyContract: async (
      params: TestContractParams<
        FealtyTypes.Fields,
        {
          bribe: bigint;
          time: bigint;
          lordAddress: Address;
          minimumClass: bigint;
          lordSubjectIndex: bigint;
          campaign: HexString;
          subjecttarget: Address;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createFealtyContract", params);
    },
    swearForGold: async (
      params: TestContractParams<
        FealtyTypes.Fields,
        {
          lordAddress: Address;
          subjectAddress: Address;
          lordSubjectIndex: bigint;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "swearForGold", params);
    },
    swearFealtyWithoutGoldForFree: async (
      params: TestContractParams<
        FealtyTypes.Fields,
        { lordAddress: Address; subjectAddress: Address; time: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "swearFealtyWithoutGoldForFree", params);
    },
    rescindGoldFealtyOffer: async (
      params: TestContractParams<
        FealtyTypes.Fields,
        { lordAddress: Address; lordSubjectIndex: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "rescindGoldFealtyOffer", params);
    },
    becomeOverlord: async (
      params: TestContractParams<FealtyTypes.Fields, { lordAddress: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "becomeOverlord", params);
    },
    declareAnathemaByHigherLord: async (
      params: TestContractParams<
        FealtyTypes.Fields,
        {
          declarerLordAddress: Address;
          scroundrelAddress: Address;
          bribe: bigint;
          reason: HexString;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "declareAnathemaByHigherLord", params);
    },
    declareAnathemaByLord: async (
      params: TestContractParams<
        FealtyTypes.Fields,
        {
          declarerLordAddress: Address;
          scroundrelAddress: Address;
          bribe: bigint;
          reason: HexString;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "declareAnathemaByLord", params);
    },
    revokeAnathemaByDeclarer: async (
      params: TestContractParams<
        FealtyTypes.Fields,
        { revokerAddress: Address; scroundrelAddress: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "revokeAnathemaByDeclarer", params);
    },
    revokeAnathemaByHighLord: async (
      params: TestContractParams<
        FealtyTypes.Fields,
        { revokerAddress: Address; scroundrelAddress: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "revokeAnathemaByHighLord", params);
    },
    revokeAnathemaByBribe: async (
      params: TestContractParams<
        FealtyTypes.Fields,
        { scroundrelAddress: Address; lordAddress: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "revokeAnathemaByBribe", params);
    },
    revokeAnathemaByTime: async (
      params: TestContractParams<
        FealtyTypes.Fields,
        { scroundrelAddress: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "revokeAnathemaByTime", params);
    },
    declareWar: async (
      params: TestContractParams<
        FealtyTypes.Fields,
        { declarerAddress: Address; targetAddress: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "declareWar", params);
    },
    voteInElection: async (
      params: TestContractParams<
        FealtyTypes.Fields,
        { voterId: HexString; voteInput: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "voteInElection", params);
    },
    validateNFT: async (
      params: TestContractParams<FealtyTypes.Fields, { callerid: HexString }>
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "validateNFT", params);
    },
    validateCollection: async (
      params: TestContractParams<
        FealtyTypes.Fields,
        { collectionId: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "validateCollection", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Fealty = new Factory(
  Contract.fromJson(
    FealtyContractJson,
    "",
    "d7e92d469b2e1b80eb7d86cb2068d08ec10e72cbc7f223d8c805682b18458ee5"
  )
);

// Use this class to interact with the blockchain
export class FealtyInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<FealtyTypes.State> {
    return fetchContractState(Fealty, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeNewMarriageEvent(
    options: EventSubscribeOptions<FealtyTypes.NewMarriageEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Fealty.contract,
      this,
      options,
      "NewMarriage",
      fromCount
    );
  }

  subscribeNewMarriageContractOfferEvent(
    options: EventSubscribeOptions<FealtyTypes.NewMarriageContractOfferEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Fealty.contract,
      this,
      options,
      "NewMarriageContractOffer",
      fromCount
    );
  }

  subscribeNewMarriageWithDowryEvent(
    options: EventSubscribeOptions<FealtyTypes.NewMarriageWithDowryEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Fealty.contract,
      this,
      options,
      "NewMarriageWithDowry",
      fromCount
    );
  }

  subscribeRescindMarriageEvent(
    options: EventSubscribeOptions<FealtyTypes.RescindMarriageEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Fealty.contract,
      this,
      options,
      "RescindMarriage",
      fromCount
    );
  }

  subscribeDivorceEvent(
    options: EventSubscribeOptions<FealtyTypes.DivorceEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Fealty.contract,
      this,
      options,
      "Divorce",
      fromCount
    );
  }

  subscribeBecomeLoverEvent(
    options: EventSubscribeOptions<FealtyTypes.BecomeLoverEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Fealty.contract,
      this,
      options,
      "BecomeLover",
      fromCount
    );
  }

  subscribeNewFealtyContractEvent(
    options: EventSubscribeOptions<FealtyTypes.NewFealtyContractEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Fealty.contract,
      this,
      options,
      "NewFealtyContract",
      fromCount
    );
  }

  subscribeNewSwearForGoldEvent(
    options: EventSubscribeOptions<FealtyTypes.NewSwearForGoldEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Fealty.contract,
      this,
      options,
      "NewSwearForGold",
      fromCount
    );
  }

  subscribeNewSwearForFreeEvent(
    options: EventSubscribeOptions<FealtyTypes.NewSwearForFreeEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Fealty.contract,
      this,
      options,
      "NewSwearForFree",
      fromCount
    );
  }

  subscribeNewRescindGoldFealtyOfferEvent(
    options: EventSubscribeOptions<FealtyTypes.NewRescindGoldFealtyOfferEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Fealty.contract,
      this,
      options,
      "NewRescindGoldFealtyOffer",
      fromCount
    );
  }

  subscribeNewDeclareAnathemaByHigherLordEvent(
    options: EventSubscribeOptions<FealtyTypes.NewDeclareAnathemaByHigherLordEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Fealty.contract,
      this,
      options,
      "NewDeclareAnathemaByHigherLord",
      fromCount
    );
  }

  subscribeNewDeclareAnathemaByLordEvent(
    options: EventSubscribeOptions<FealtyTypes.NewDeclareAnathemaByLordEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Fealty.contract,
      this,
      options,
      "NewDeclareAnathemaByLord",
      fromCount
    );
  }

  subscribeNewRevokeAnathemaByDeclarerEvent(
    options: EventSubscribeOptions<FealtyTypes.NewRevokeAnathemaByDeclarerEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Fealty.contract,
      this,
      options,
      "NewRevokeAnathemaByDeclarer",
      fromCount
    );
  }

  subscribeNewRevokeAnathemaByHighLordEvent(
    options: EventSubscribeOptions<FealtyTypes.NewRevokeAnathemaByHighLordEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Fealty.contract,
      this,
      options,
      "NewRevokeAnathemaByHighLord",
      fromCount
    );
  }

  subscribeNewRevokeAnathemaByBribeEvent(
    options: EventSubscribeOptions<FealtyTypes.NewRevokeAnathemaByBribeEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Fealty.contract,
      this,
      options,
      "NewRevokeAnathemaByBribe",
      fromCount
    );
  }

  subscribeNewRevokeAnathemaByTimeEvent(
    options: EventSubscribeOptions<FealtyTypes.NewRevokeAnathemaByTimeEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Fealty.contract,
      this,
      options,
      "NewRevokeAnathemaByTime",
      fromCount
    );
  }

  subscribeWarDeclaredEvent(
    options: EventSubscribeOptions<FealtyTypes.WarDeclaredEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Fealty.contract,
      this,
      options,
      "WarDeclared",
      fromCount
    );
  }

  subscribeVotedEvent(
    options: EventSubscribeOptions<FealtyTypes.VotedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Fealty.contract,
      this,
      options,
      "Voted",
      fromCount
    );
  }

  subscribeBecameOverlordEvent(
    options: EventSubscribeOptions<FealtyTypes.BecameOverlordEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Fealty.contract,
      this,
      options,
      "BecameOverlord",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | FealtyTypes.NewMarriageEvent
      | FealtyTypes.NewMarriageContractOfferEvent
      | FealtyTypes.NewMarriageWithDowryEvent
      | FealtyTypes.RescindMarriageEvent
      | FealtyTypes.DivorceEvent
      | FealtyTypes.BecomeLoverEvent
      | FealtyTypes.NewFealtyContractEvent
      | FealtyTypes.NewSwearForGoldEvent
      | FealtyTypes.NewSwearForFreeEvent
      | FealtyTypes.NewRescindGoldFealtyOfferEvent
      | FealtyTypes.NewDeclareAnathemaByHigherLordEvent
      | FealtyTypes.NewDeclareAnathemaByLordEvent
      | FealtyTypes.NewRevokeAnathemaByDeclarerEvent
      | FealtyTypes.NewRevokeAnathemaByHighLordEvent
      | FealtyTypes.NewRevokeAnathemaByBribeEvent
      | FealtyTypes.NewRevokeAnathemaByTimeEvent
      | FealtyTypes.WarDeclaredEvent
      | FealtyTypes.VotedEvent
      | FealtyTypes.BecameOverlordEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(Fealty.contract, this, options, fromCount);
  }

  methods = {
    checkChancellor: async (
      params?: FealtyTypes.CallMethodParams<"checkChancellor">
    ): Promise<FealtyTypes.CallMethodResult<"checkChancellor">> => {
      return callMethod(
        Fealty,
        this,
        "checkChancellor",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    validateNFT: async (
      params: FealtyTypes.CallMethodParams<"validateNFT">
    ): Promise<FealtyTypes.CallMethodResult<"validateNFT">> => {
      return callMethod(
        Fealty,
        this,
        "validateNFT",
        params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends FealtyTypes.MultiCallParams>(
    calls: Calls
  ): Promise<FealtyTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Fealty,
      this,
      calls,
      getContractByCodeHash
    )) as FealtyTypes.MultiCallResults<Calls>;
  }
}
