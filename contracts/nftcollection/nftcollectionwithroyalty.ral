import "std/nft_collection_with_royalty_interface"

Contract NFTPublicSaleCollectionRandomWithRoyalty(
    nftTemplateId: ByteVec,
    collectionUri: ByteVec,
    collectionOwner: Address,
    nftBaseUri: ByteVec,
    maxSupply: U256,
    mintPrice: U256,
    fealtyId: ByteVec,
    royaltyRate: U256,
    mut totalSupply: U256,
    mut maxmaxnumber: U256
) extends NFTPublicSaleCollectionRandomBase(nftTemplateId, collectionUri, collectionOwner, nftBaseUri, maxSupply, mintPrice, fealtyId, totalSupply, maxmaxnumber)
    implements INFTCollectionWithRoyalty {

    enum ErrorCodes {
        ActiveSupply = 512
        NotCollectionOwner = 514
    }   

    pub fn royaltyAmount(@unused tokenId: ByteVec, salePrice: U256) -> (U256) {
        return salePrice * royaltyRate / 10000
    }

    @using(assetsInContract = false, preapprovedAssets = true, checkExternalCaller = false)
    pub fn payRoyalty(payer: Address, amount: U256) -> () {
        transferTokenToSelf!(payer, ALPH, amount)
    }

    @using(checkExternalCaller = false)
    pub fn withdrawRoyalty(to: Address, amount: U256) -> () {
        withdraw(to, amount)
    }

    @using(preapprovedAssets = true, assetsInContract = false, checkExternalCaller = false)
    pub fn changeOwner(
        nftId: ByteVec
        ) -> () {
    
        let owner = callerAddress!()
        
        let timeuntil = blockTimeStamp!() + 15000
        lockApprovedAssets!{owner -> nftId: 1, ALPH: dustAmount!()}(owner, timeuntil)
    
        NFT(nftId).ownerchange(owner)
    }

    @using(preapprovedAssets = true, assetsInContract = false, checkExternalCaller = false, updateFields = true)
    pub fn destroyNft(
        nftId: ByteVec
        ) -> () {
        
        let index = NFT(nftId).getNFTIndex()
        validateNFT(nftId, index)
        totalSupply = totalSupply - 1
        NFT(nftId).destroyNft(callerAddress!())
        burnToken!(callerAddress!(), nftId, 1)
        

        if (index > maxmaxnumber)
        {maxmaxnumber = index + 1}
        else
        {maxmaxnumber = maxmaxnumber}
    }

    @using(preapprovedAssets = true, assetsInContract = true, checkExternalCaller = false)
    pub fn destroyNftAndReturnIt(
        nftId: ByteVec,
        lockedasset: U256
        ) -> () {
    
        let index = NFT(nftId).getNFTIndex()

        validateNFT(nftId, index)

        let nftclass = NFT(nftId).getNftclass()
        
        let minter = callerAddress!()
        let (vote, voteTime) = NFT(nftId).getVote()
        let (wartarget, warStarted) = NFT(nftId).getWarTarget()
        let (marriageTime, marriage) = NFT(nftId).getMarriage()
        let feudalLord = NFT(nftId).getfeudalLord()
        let feudalTime = NFT(nftId).getFeudalTime()
        let anathema = NFT(nftId).getAnathema()
        let anathemaDeclaredCount = NFT(nftId).getAnathemaDeclaredCount()
        let lovercount = NFT(nftId).getLovercount()
        let anathemaCooldown = NFT(nftId).getAnathemaCooldown()
        
        let (encodeImmutableFields, encodeMutableFields) = NFT.encodeFields!(getNFTUri(index), selfContractId!(), index, nftclass, fealtyId, minter, vote, voteTime, wartarget, warStarted, marriage, marriageTime, feudalLord, feudalTime, anathema, anathemaDeclaredCount, lovercount, anathemaCooldown)

        NFT(nftId).destroyNft(selfAddress!())
        burnToken!(callerAddress!(), nftId, 1)

        let path = toByteVec!(index)

        copyCreateSubContractWithToken!{selfAddress!() -> ALPH: lockedasset}(
            path,
            nftTemplateId,
            encodeImmutableFields,
            encodeMutableFields,
            1,
            minter
        )

        let savedamount = 1000000000000000000 - lockedasset
        transferTokenFromSelf!(minter, ALPH, savedamount)

    }


    @using(preapprovedAssets = false, assetsInContract = true, updateFields = false, checkExternalCaller = true)
    pub fn destroyCollection() -> () {
    assert!(totalSupply == 0, ErrorCodes.ActiveSupply)
    checkCaller!(callerAddress!() == collectionOwner, ErrorCodes.NotCollectionOwner)
    destroySelf!(collectionOwner)
    }



}
